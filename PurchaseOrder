package UserLoginSystem;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;

public class PurchaseOrder {

    public static void processPurchaseRequisition() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Select an option:");
            System.out.println("1. Add Purchase Order");
            System.out.println("2. Delete Purchase Order");
            System.out.println("3. List Purchase Order");
            System.out.println("0. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    processAddPurchaseOrder(); // Add Purchase Order
                    break;
                case 2:
                    processDeletePurchaseOrder(); // Delete Purchase Order
                    break;
                case 3:
                    processListOFPurchaseOrder(); // List of Purchase Order
                    break;
                case 0:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please select a valid option.");
            }
        }
    }

    public static void processAddPurchaseOrder() {
        try {
            File prDetailsFile = new File("PurchaseRequisitions.txt");
            if (prDetailsFile.exists()) {
                Scanner fileScanner = new Scanner(prDetailsFile);

                List<String> prDetailsList = new ArrayList<>();

                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        prDetailsList.add(line);
                    }
                }

                fileScanner.close();

                displayAvailablePurchaseRequisitions(prDetailsList);  // Display available PRs

                Scanner scanner = new Scanner(System.in);
                System.out.print("Enter PR ID to process: ");
                String prIdToProcess = scanner.nextLine();

                boolean found = false;
                StringBuilder newPurchaseOrders = new StringBuilder();

                int poCounter = getLatestPOCounter(); // Get the latest PO counter from existing PO IDs

                for (String prDetails : prDetailsList) {
                    String[] prDetailsArr = prDetails.split(";");
                    String prId = prDetailsArr[0].trim();

                    if (prId.equalsIgnoreCase(prIdToProcess)) {
                        found = true;
                        displayPrDetails(prDetailsArr);
                        String decision = getUserDecision(scanner);
                        if (decision.equalsIgnoreCase("A")) {
                            System.out.println("PR Approved.");
                            movePRToPO(prDetails, poCounter, User.Username); // Pass the purchase manager's name
                            poCounter++; // Increment the PO counter
                        } else {
                            processUserDecision(decision, newPurchaseOrders, prDetails);
                        }
                    } else {
                        newPurchaseOrders.append(prDetails).append("\n");
                    }
                }

                if (!found) {
                    System.out.println("PR ID not found.");
                } else {
                    handleProcessedPurchaseRequisitions(newPurchaseOrders.toString());
                }

            } else {
                System.out.println("Purchase Requisitions file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void displayAvailablePurchaseRequisitions(List<String> prDetailsList) {
        System.out.println("Available Purchase Requisitions:");
        System.out.println("-------------------------------------------------------------------------------");
        System.out.printf("%-15s | %-10s | %-8s | %-15s | %-10s | %-15s\n",
                "PR Number", "Item Code", "Quantity", "Required Date", "Total Price", "User");
        System.out.println("-------------------------------------------------------------------------------");

        for (String prDetails : prDetailsList) {
            String[] prDetailsArr = prDetails.split(";");
            String prNumber = prDetailsArr[0];
            String itemCode = prDetailsArr[1];
            String quantity = prDetailsArr[2];
            String requiredDate = prDetailsArr[3];
            String totalPrice = prDetailsArr[4];
            String user = prDetailsArr[5];
            System.out.printf("%-15s | %-10s | %-8s | %-15s | %-10s | %-15s\n",
                    prNumber, itemCode, quantity, requiredDate, totalPrice, user);
        }
        System.out.println("-------------------------------------------------------------------------------");
    }

    private static void createPurchaseOrder(String prDetails) throws IOException {
        FileWriter purchaseOrderFile = new FileWriter("PurchaseOrder.txt", true);
        purchaseOrderFile.write(prDetails + "\n");
        purchaseOrderFile.close();
    }

    private static void movePRToPO(String prDetails, int poCounter, String purchaseManager) throws IOException {
        String poid = String.format("PO%04d", poCounter);
        String[] prDetailsArr = prDetails.split(";");
        String itemCode = prDetailsArr[1];
        String supplierName = getSupplierNameForPR(itemCode);

        FileWriter purchaseOrderFile = new FileWriter("PurchaseOrder.txt", true);
        purchaseOrderFile.write(poid + ";" + prDetails + ";" + purchaseManager + ";" + supplierName + "\n");
        purchaseOrderFile.close();

        // Display the details of the newly generated PO
        System.out.println("New Purchase Order Generated:");
        System.out.println("--------------------------------------------");
        System.out.println("\n\nPO ID: " + poid);
        System.out.println("Purchase Manager: " + purchaseManager);
        System.out.println("Supplier Name: " + supplierName);
        displayPrDetails(prDetailsArr); // Display PR details
        System.out.println("--------------------------------------------");
    }

    private static void displayPrDetails(String[] prDetails) {
        System.out.println("PR Details:");
        System.out.println("------------------------------");
        System.out.println("PR Number: " + prDetails[0]);
        System.out.println("Item Code: " + prDetails[1]);
        System.out.println("Quantity: " + prDetails[2]);
        System.out.println("Required Date: " + prDetails[3]);
        System.out.println("Total Price: " + prDetails[4]);
        System.out.println("Sales Maneger: " + prDetails[5]);
        System.out.println("------------------------------");
    }

    private static String getUserDecision(Scanner scanner) {
        System.out.print("Approve (A) or Reject (R) this PR? ");
        return scanner.nextLine();
    }

    private static void processUserDecision(String decision, StringBuilder newPurchaseOrders, String line) {
        if (decision.equalsIgnoreCase("A")) {
            newPurchaseOrders.append(line).append("\n");
            System.out.println("PR Approved.");
        } else if (decision.equalsIgnoreCase("R")) {
            System.out.println("PR Rejected.");
        } else {
            System.out.println("Invalid choice. PR remains pending.");
            newPurchaseOrders.append(line).append("\n");
        }
    }

    private static void handleProcessedPurchaseRequisitions(String newPurchaseOrders) throws IOException {
        FileWriter updatedPrFile = new FileWriter("PurchaseRequisitions.txt");
        updatedPrFile.write(newPurchaseOrders);
        updatedPrFile.close();
    }

    private static int getLatestPOCounter() throws IOException {
        File poFile = new File("PurchaseOrder.txt");
        if (poFile.exists()) {
            Scanner fileScanner = new Scanner(poFile);
            int latestCounter = 0;
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                if (!line.trim().isEmpty() && line.startsWith("PO")) {
                    String poId = line.substring(0, 6);
                    int poCounter = Integer.parseInt(poId.substring(2));
                    latestCounter = Math.max(latestCounter, poCounter);
                }
            }
            fileScanner.close();
            return latestCounter + 1;
        }
        return 1; // If the file doesn't exist, start from PO0001
    }

    private static String getSupplierNameForPR(String itemCode) throws IOException {
        File supplierListFile = new File("SupplierList.txt");
        if (supplierListFile.exists()) {
            Scanner fileScanner = new Scanner(supplierListFile);

            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                String[] supplierDetails = line.split(";");
                if (supplierDetails.length >= 5 && supplierDetails[4].equals(itemCode)) {
                    return supplierDetails[1]; // Return the supplier name
                }
            }

            fileScanner.close();
        }

        return "Unknown Supplier"; // Default if supplier not found or file doesn't exist
    }

    public static void processDeletePurchaseOrder() {
        try {
            File poFile = new File("PurchaseOrder.txt");
            if (poFile.exists()) {
                Scanner fileScanner = new Scanner(poFile);

                List<String> poDetailsList = new ArrayList<>();

                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty() && line.startsWith("PO")) {
                        poDetailsList.add(line);
                    }
                }

                fileScanner.close();

                displayPurchaseOrders(poDetailsList);  // Display available POs

                Scanner scanner = new Scanner(System.in);
                System.out.print("Enter PO ID to delete: ");
                String poIdToDelete = scanner.nextLine();

                boolean found = false;
                StringBuilder updatedPurchaseOrders = new StringBuilder();

                for (String poDetails : poDetailsList) {
                    if (poDetails.startsWith(poIdToDelete)) {
                        found = true;
                        System.out.println("Deleted PO:");
                        System.out.println("----------------------------");
                        System.out.println(poDetails);
                    } else {
                        updatedPurchaseOrders.append(poDetails).append("\n");
                    }
                }

                if (!found) {
                    System.out.println("PO ID not found.");
                } else {
                    handleUpdatedPurchaseOrders(updatedPurchaseOrders.toString());
                }

            } else {
                System.out.println("Purchase Order file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void displayPurchaseOrders(List<String> poDetailsList) {
        System.out.println("Purchase Orders:");
        System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------");
        System.out.printf("%-15s | %-15s | %-10s | %-8s | %-15s | %-11s | %-15s | %-16s | %-15s\n",
                "PO ID", "PR Number", "Item Code", "Quantity", "Required Date", "Total Price", "Sales Manager", "Purchase Manager", "Supplier Name");
        System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------");

        for (String poDetails : poDetailsList) {
            String[] poDetailsArr = poDetails.split(";", 2); // Split only into 2 parts (PO ID and rest)
            String poId = poDetailsArr[0];
            String prDetails = poDetailsArr[1];
            String[] prDetailsArr = prDetails.split(";");
            System.out.printf("%-15s | %-15s | %-10s | %-8s | %-15s | %-11s | %-15s | %-16s | %-15s\n",
                    poId, prDetailsArr[0], prDetailsArr[1], prDetailsArr[2], prDetailsArr[3], prDetailsArr[4], prDetailsArr[5], prDetailsArr[6], prDetailsArr[7]);
        }

        System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------");
    }

    private static void handleUpdatedPurchaseOrders(String updatedPurchaseOrders) throws IOException {
        FileWriter updatedPoFile = new FileWriter("PurchaseOrder.txt");
        updatedPoFile.write(updatedPurchaseOrders);
        updatedPoFile.close();
    }

    public static void processListOFPurchaseOrder() {
        try {
            File poFile = new File("PurchaseOrder.txt");
            if (poFile.exists()) {
                Scanner fileScanner = new Scanner(poFile);

                System.out.println("Purchase Orders:");
                System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------");
                System.out.printf("%-15s | %-15s | %-10s | %-8s | %-15s | %-11s | %-15s | %-16s | %-15s\n",
                        "PO ID", "PR Number", "Item Code", "Quantity", "Required Date", "Total Price", "Sales Manager", "Purchase Manager", "Supplier Name");
                System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------");

                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty() && line.startsWith("PO")) {
                        String[] poDetailsArr = line.split(";", 2); // Split only into 2 parts (PO ID and rest)
                        String poId = poDetailsArr[0];
                        String poDetails = poDetailsArr[1];
                        String[] prDetails = poDetails.split(";");
                        System.out.printf("%-15s | %-15s | %-10s | %-8s | %-15s | %-11s | %-15s | %-16s | %-15s\n",
                                poId, prDetails[0], prDetails[1], prDetails[2], prDetails[3], prDetails[4], prDetails[5], prDetails[6], prDetails[7]);
                    }
                }

                System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------");
                fileScanner.close();
            } else {
                System.out.println("Purchase Order file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
