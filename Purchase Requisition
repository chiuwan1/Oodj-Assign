/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package SSB.PurchaseOrderManagementSystem;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class PurchaseRequisition {

    private String PRnumber;
    private String Purchaseitemcode;
    private int Purchasequantity;
    private String RequiredDate;

    public PurchaseRequisition(String PRnumber, String Purchaseitemcode, int Purchasequantity, String RequiredDate) {
        this.PRnumber = PRnumber;
        this.Purchaseitemcode = Purchaseitemcode;
        this.Purchasequantity = Purchasequantity;
        this.RequiredDate = RequiredDate;
    }

    public String Purchaseitemcode() {
        return Purchaseitemcode;
    }

    public int getPurchasequantity() {
        return Purchasequantity;
    }

    public String getRequiredDate() {
        return RequiredDate;
    }

    public static void displayStockItems() {
        try {
            File itemDetailsFile = new File("ItemDetails.txt");
            if (itemDetailsFile.exists()) {
                Scanner fileScanner = new Scanner(itemDetailsFile);
                System.out.printf("%-30s%s\n", "", "Item List Stock\n");
                System.out.println("------------------------------------------------------------------------------------");
                System.out.printf("| %-10s | %-17s | %-15s | %-15s | %-10s |\n",
                        "Item Code", "Item Name", "Supplier ID", "Stock Quantity", "Unit Price");
                System.out.println("------------------------------------------------------------------------------------");
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] itemDetails = line.split(";");
                        int stockQuantity = Integer.parseInt(itemDetails[3]);
                        System.out.printf("| %-10s | %-17s | %-15s | %-15d | %-10s |\n",
                                itemDetails[0], itemDetails[1], itemDetails[2],
                                stockQuantity, itemDetails[4]);

                    }
                }
                System.out.println("------------------------------------------------------------------------------------");
                fileScanner.close();
            } else {
                System.out.println("Item details file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public static void displayLowStockItems() {
    try {
        File itemDetailsFile = new File("ItemDetails.txt");
        if (itemDetailsFile.exists()) {
            Scanner fileScanner = new Scanner(itemDetailsFile);
            System.out.printf("%-30s%s\n", "", "Low Stock Item List\n");
            System.out.println("------------------------------------------------------------------------------------");
            System.out.printf("| %-10s | %-17s | %-15s | %-15s | %-10s |\n",
                    "Item Code", "Item Name", "Supplier ID", "Stock Quantity", "Unit Price");
            System.out.println("------------------------------------------------------------------------------------");
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                if (!line.trim().isEmpty()) {
                    String[] itemDetails = line.split(";");
                    int stockQuantity = Integer.parseInt(itemDetails[3]);
                    if (stockQuantity <= 10) {
                        System.out.printf("| %-10s | %-17s | %-15s | %-15d | %-10s |\n",
                                itemDetails[0], itemDetails[1], itemDetails[2],
                                stockQuantity, itemDetails[4]);
                    }
                }
            }
            System.out.println("------------------------------------------------------------------------------------");
            fileScanner.close();
        } else {
            System.out.println("Item details file not found.");
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}


    public static void generatePR() {
        String initialPRNumber = null;
        Scanner scanner = new Scanner(System.in);
        List<PurchaseRequisition> purchaseRequisitions = new ArrayList<>(); // List to store item details

        boolean AddItem = true;

        while (AddItem) {
            System.out.println("\nPurchase Requisition\n");
            System.out.print("Enter Item Code of the item to be purchased: ");
            String Purchaseitemcode = scanner.nextLine();

            int Purchasequantity = 0;
            while (true) {
                try {
                    System.out.println("Enter Purchase Quantity: ");
                    Purchasequantity = Integer.parseInt(scanner.nextLine());
                    break;
                } catch (NumberFormatException e) {
                    System.out.println("Please enter a valid integer value for Purchase Quantity!");
                }
            }

            System.out.print("Enter item required date (DD-MM-YYYY): ");
            String RequiredDate = scanner.nextLine();

            PurchaseRequisition pr = new PurchaseRequisition(null, Purchaseitemcode, Purchasequantity, RequiredDate); // Initial PR number set to null
            purchaseRequisitions.add(pr); // Add item details to the list

            System.out.print("Do you want to purchase more item? (yes/no): ");
            String Input = scanner.nextLine();
            if (!Input.equalsIgnoreCase("yes")) {
                AddItem = false;
            }
        }

        // Generate PR and save all records
        initialPRNumber = generateAndSavePR(initialPRNumber, purchaseRequisitions, User.Username);
        // Display generated PR and its details
        displayGeneratedPR(initialPRNumber);
    }

    private static String generateAndSavePR(String initialPRNumber, List<PurchaseRequisition> purchaseRequisitions, String Username) {
        

        // Calculate unit prices, generate PR, and save records
        try (FileWriter F1 = new FileWriter("PurchaseRequisitions.txt", true)) {
            for (PurchaseRequisition pr : purchaseRequisitions) {
                float unitPrice = UnitPrice(pr.Purchaseitemcode);
                float totalPrice = unitPrice * pr.Purchasequantity;

                if (initialPRNumber == null) {
                    int counter;
                    for (int i = 1; i <= 99999; i++) {
                        counter = i;
                        initialPRNumber = String.format("PR%04d", counter);
                        boolean isPRCodeAvailable = isPRCodeAvailable(initialPRNumber);
                        if (isPRCodeAvailable) {
                            break;
                        }
                    }
                }

                pr.PRnumber = initialPRNumber; // Assign the generated PR number
                F1.write(pr.PRnumber + ";" + pr.Purchaseitemcode + ";" + pr.Purchasequantity + ";" + pr.RequiredDate + ";" + totalPrice + ";" + Username + "\n");
            }
            System.out.println("\nPurchase Requisitions are successfully added and saved\n");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error generating Purchase Requisitions.");
        }

        return initialPRNumber;
    }

    private static void displayGeneratedPR(String initialPRNumber) {
        try {
            File file = new File("PurchaseRequisitions.txt");
            if (file.exists()) {
                Scanner fileScanner = new Scanner(file);
                System.out.println("\n******************************************************************************************************");
                System.out.println("*                                   Purchase Requisition                                             *");
                System.out.println("******************************************************************************************************");
                System.out.println(" PR Number: " + initialPRNumber);
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                String currentDate = dateFormat.format(new Date());
                System.out.println(" Issued Date: " + currentDate);
                System.out.println(" Issued By: " + User.Username);
                System.out.println("------------------------------------------------------------------------------------------------------");
                System.out.printf("| %-10s | %-15s | %-12s | %-10s | %-10s | %-10s | %-12s |\n",
                        "Item Code", "Item Name", "Supplier ID", "Quantity", "Unit Price", "Total", "Date Required");
                System.out.println("------------------------------------------------------------------------------------------------------");
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] prDetails = line.split(";");
                        if (prDetails[0].equals(initialPRNumber)) {
                            String supplierID = SupplierID(prDetails[1]);
                            String itemName = ItemName(prDetails[1]);
                            int quantity = Integer.parseInt(prDetails[2]);

                            // Calculate unit price within the loop for each item
                            float unitPrice = UnitPrice(prDetails[1]);
                            float totalPrice = unitPrice * quantity;
                            System.out.printf("| %-10s | %-15s | %-12s | %-10s | %-10.2f | %-10.2f | %-12s  |\n",
                                    prDetails[1], itemName, supplierID, prDetails[2], unitPrice, totalPrice, prDetails[3]);
                        }
                    }
                }

                System.out.println("******************************************************************************************************");
                fileScanner.close();
            } else {
                System.out.println("Purchase Requisitions file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean isPRCodeAvailable(String Purchaseitemcode) {
        try {
            File F2 = new File("PurchaseRequisitions.txt");
            if (F2.exists()) {
                try (Scanner Filescanner = new Scanner(F2)) {
                    while (Filescanner.hasNextLine()) {
                        String line = Filescanner.nextLine();
                        if (!line.trim().isEmpty()) {
                            String[] PurchaseRequisition = line.split(";");
                            if (PurchaseRequisition[0].equals(Purchaseitemcode)) {
                                return false;
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    public static String SupplierID(String itemCode) {
        try {
            File file = new File("ItemDetails.txt");
            if (file.exists()) {
                Scanner fileScanner = new Scanner(file);
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] itemDetails = line.split(";");
                        if (itemDetails[0].equals(itemCode)) {
                            return itemDetails[2];
                        }
                    }
                }
                fileScanner.close();
            } else {
                System.out.println("ItemDetails file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static String ItemName(String itemCode) {
        try {
            File file = new File("ItemDetails.txt");
            if (file.exists()) {
                Scanner fileScanner = new Scanner(file);
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] itemDetails = line.split(";");
                        if (itemDetails[0].equals(itemCode)) {
                            return itemDetails[1];
                        }
                    }
                }
                fileScanner.close();
            } else {
                System.out.println("ItemDetails file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static float UnitPrice(String itemCode) {
        try {
            File file = new File("ItemDetails.txt");
            if (file.exists()) {
                Scanner fileScanner = new Scanner(file);
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] itemDetails = line.split(";");
                        if (itemDetails[0].equals(itemCode)) {
                            return Float.parseFloat(itemDetails[4]);
                        }
                    }
                }
                fileScanner.close();
            } else {
                System.out.println("ItemDetails file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0.0f;
    }

    public static void deletePR() {
        List<String> prList = new ArrayList<>();
        Scanner prIdScanner = new Scanner(System.in);
        System.out.println("Enter the PR ID to delete: ");
        String prIdToDelete = prIdScanner.nextLine();

        try {
            File prDetailsFile = new File("PurchaseRequisitions.txt");
            if (prDetailsFile.exists()) {
                Scanner fileScanner = new Scanner(prDetailsFile);
                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] prDetails = line.split(";");
                        prList.add(line);
                    }
                }
                fileScanner.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        List<String> prLinesToDelete = new ArrayList<>();
        for (String prLine : prList) {
            String[] prDetails = prLine.split(";");
            if (prDetails[0].equals(prIdToDelete)) {
                prLinesToDelete.add(prLine);
            }
        }

        if (!prLinesToDelete.isEmpty()) {
            prList.removeAll(prLinesToDelete);
            try {
                try (FileWriter writer = new FileWriter("PurchaseRequisitions.txt")) {
                    for (String prLine : prList) {
                        writer.write(prLine);
                        writer.write(System.lineSeparator());
                    }
                }
                System.out.println("\nPR records deleted successfully!");

            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Error occurred while deleting the PR records.");
            }
        } else {
            System.out.println("PR ID not found.");
        }
    }

    public static void displayPRList() {
        try {
            File prDetailsFile = new File("purchaseRequisitions.txt");
            if (prDetailsFile.exists()) {
                Scanner fileScanner = new Scanner(prDetailsFile);
                System.out.println("-----------------------------------");
                System.out.printf("%-15s | %s\n", "PR ID", "Sales Manager");
                System.out.println("-----------------------------------");

                List<String> PrId = new ArrayList<>(); // To store unique PR IDs

                while (fileScanner.hasNextLine()) {
                    String line = fileScanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] prDetails = line.split(";");
                        String prId = prDetails[0];
                        String salesManager = prDetails[5];

                        if (!PrId.contains(prId)) {
                            PrId.add(prId);
                            System.out.printf("%-15s | %s\n", prId, salesManager);
                        }
                    }
                }
                System.out.println("-----------------------------------");
                fileScanner.close();
            } else {
                System.out.println("Purchase requisitions file not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
