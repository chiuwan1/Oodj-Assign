package UserLoginSystem;


import java.io.File;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Item {

    private String ItemCode;
    private String ItemName;
    private String SupplierID;

    public Item(String ItemCode, String ItemName, String SupplierID) {
        this.ItemCode = ItemCode;
        this.ItemName = ItemName;
        this.SupplierID = SupplierID;
    }

    public String getItemCode() {
        return ItemCode;
    }

    public void setItemCode(String itemCode) {
        this.ItemCode = itemCode;
    }

    public String getItemName() {
        return ItemName;
    }

    public void setItemName(String itemName) {
        this.ItemName = itemName;
    }

    public String getSupplierID() {
        return SupplierID;
    }

    public void setSupplierID(String supplierID) {
        this.SupplierID = supplierID;
    }

    @Override
    public String toString() {
        return ItemCode + ";" + ItemName + ";" + SupplierID + ";";
    }
}

class ItemDetails extends Item {

    private int StockQuantity;
    private float UnitPrice;

    public ItemDetails(String ItemCode, String ItemName, String SupplierID, int StockQuantity, float UnitPrice) {
        super(ItemCode, ItemName, SupplierID);
        this.StockQuantity = StockQuantity;
        this.UnitPrice = UnitPrice;
    }

    public int getStockQuantity() {
        return StockQuantity;
    }

    public void setStockQuantity(int stockQuantity) {
        this.StockQuantity = stockQuantity;
    }

    public float getUnitPrice() {
        return UnitPrice;
    }

    public void setUnitPrice(float unitPrice) {
        this.UnitPrice = unitPrice;
    }

    @Override
    public String toString() {
        return super.toString() + StockQuantity + ";" + UnitPrice + ";";
    }

    public static void AddItem() {

        Scanner SC1 = new Scanner(System.in);

        List<ItemDetails> Itemlist = new ArrayList<>();

        System.out.println("Item Entry!\n");

        int numericPart;
        String NewItemCode = null;

        for (int i = 1; i <= 99999; i++) {
            numericPart = i;
            NewItemCode = String.format("I%05d", numericPart);
            boolean isCodeAvailable = isItemCodeAvailable(NewItemCode);
            if (isCodeAvailable) {
                break;
            }
        }
        System.out.println("Enter Item Name: ");
        String ItemName = SC1.nextLine();
        System.out.println("Enter Supplier ID: ");
        String SupplierID = SC1.nextLine();
        System.out.println("Enter Item Quantity: ");
        int StockQuantity;
        while (true) {
            try {
                StockQuantity = Integer.parseInt(SC1.nextLine());
                break;
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid integer value for Stock Quantity! ");
            }
        }

        System.out.println("Enter Unit Price : ");
        float UnitPrice;
        while (true) {
            try {
                UnitPrice = Float.parseFloat(SC1.nextLine());
                break;
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid value for Unit Price! ");
            }
        }

        ItemDetails Item = new ItemDetails(NewItemCode, ItemName, SupplierID, StockQuantity, UnitPrice);
        Itemlist.add(Item);

        try {
            FileWriter F1 = new FileWriter("ItemDetails.txt", true);
            F1.write(Item.toString());
            F1.write(System.lineSeparator());
            F1.close();
            System.out.println("\nRecord added successfully! ");
        } catch (IOException e) {
            System.out.println("Error!");
            e.printStackTrace();
        }

    }

    private static boolean isItemCodeAvailable(String itemCode) {
        try {
            File ItemDetails = new File("ItemDetails.txt");
            if (ItemDetails.exists()) {
                try (Scanner Filescanner = new Scanner(ItemDetails)) {
                    while (Filescanner.hasNextLine()) {
                        String line = Filescanner.nextLine();
                        if (!line.trim().isEmpty()) {
                            String[] itemDetails = line.split(";");
                            if (itemDetails[0].equals(itemCode)) {
                                return false;
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    public static void DeleteItem() {
        List<ItemDetails> itemList = new ArrayList<>();
        Scanner ItemCodeScanner = new Scanner(System.in);
        System.out.println("Enter the item code to delete: ");
        String ItemCodeToDelete = ItemCodeScanner.nextLine();
        try {
            File ItemDetails = new File("ItemDetails.txt");
            if (ItemDetails.exists()) {
                Scanner Filescanner = new Scanner(ItemDetails);
                while (Filescanner.hasNextLine()) {
                    String line = Filescanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] itemDetails = line.split(";");
                        itemList.add(new ItemDetails(
                                itemDetails[0],
                                itemDetails[1],
                                itemDetails[2],
                                Integer.parseInt(itemDetails[3]),
                                Float.parseFloat(itemDetails[4])
                        ));
                    }
                }
                Filescanner.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
        ItemDetails ItemToDelete = null;
        for (ItemDetails item : itemList) {
            if (item.getItemCode().equals(ItemCodeToDelete)) {
                ItemToDelete = item;
                break;
            }
        }
        if (ItemToDelete != null) {
            itemList.remove(ItemToDelete);
            try {
                try (FileWriter writer = new FileWriter("ItemDetails.txt")) {
                    for (ItemDetails item : itemList) {
                        writer.write(item.toString());
                        writer.write(System.lineSeparator());
                    }
                }
                System.out.println("\nRecord deleted successfully! ");

            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Error occurred while deleting the record.");
            }
        } else {
            System.out.println("Item code not found.");
        }
    }

    public static void EditItem() {
        Scanner SC1 = new Scanner(System.in);
        List<ItemDetails> Itemlist = new ArrayList<>();
        try {
            File ItemDetailsFile = new File("ItemDetails.txt");
            if (ItemDetailsFile.exists()) {
                Scanner Filescanner = new Scanner(ItemDetailsFile);
                while (Filescanner.hasNextLine()) {
                    String line = Filescanner.nextLine();
                    if (!line.trim().isEmpty()) {
                        String[] itemDetails = line.split(";");
                        Itemlist.add(new ItemDetails(
                                itemDetails[0],
                                itemDetails[1],
                                itemDetails[2],
                                Integer.parseInt(itemDetails[3]),
                                Float.parseFloat(itemDetails[4])
                        ));
                    }
                }
                Filescanner.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
        System.out.println("Enter the item code to edit: ");
        String itemCodeToEdit = SC1.nextLine();

        ItemDetails itemToEdit = null;
        for (ItemDetails item : Itemlist) {
            if (item.getItemCode().equals(itemCodeToEdit)) {
                itemToEdit = item;
                break;
            }
        }

        if (itemToEdit == null) {
            System.out.println("Item code not found.");
            return;
        }

        System.out.println("Enter new Item Name: ");
        String newItemName = SC1.nextLine();
        System.out.println("Enter new Supplier ID: ");
        String newSupplierID = SC1.nextLine();
        int newStockQuantity = 0;
        while (true) {
            try {
                System.out.println("Enter new Item Quantity: ");
                newStockQuantity = Integer.parseInt(SC1.nextLine());
                break;
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid integer value for Item Quantity!");
            }
        }

        float newUnitPrice = 0.0f;
        while (true) {
            try {
                System.out.println("Enter new Unit Price: ");
                newUnitPrice = Float.parseFloat(SC1.nextLine());
                break;
            } catch (NumberFormatException e) {
                System.out.println("Please enter a valid float value for Unit Price!");
            }
        }

        itemToEdit.setItemName(newItemName);
        itemToEdit.setSupplierID(newSupplierID);
        itemToEdit.setStockQuantity(newStockQuantity);
        itemToEdit.setUnitPrice(newUnitPrice);

        try {
            try (FileWriter writer = new FileWriter("ItemDetails.txt")) {
                for (ItemDetails item : Itemlist) {
                    writer.write(item.toString());
                    writer.write(System.lineSeparator());
                }
            }
            System.out.println("\nRecord updated successfully! ");

        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error occurred while updating the record.");
        }
    }
}


